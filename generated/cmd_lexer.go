// Code generated from cmdLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package generated

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type cmdLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var CmdLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func cmdlexerLexerInit() {
	staticData := &CmdLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'.'", "':'", "'-'", "';'", "','", "'?'", "'@'", "'<'", "'>'", "'('",
		"')'", "'['", "']'", "'{'", "'}'", "'='", "'&'", "'|'", "'^'", "'&&'",
		"'~'", "'*'", "'**'", "'null'", "'->'", "'\\u22A5'", "'\\u2225'", "'\\u2192'",
		"'\\u2194'", "'\\u2205'", "'\\u2227'", "'\\u2228'", "'\\u00AC'", "'\\u2260'",
		"'extends'", "'opts'", "'cmds'", "'if'", "'else'", "'fn'", "'cmd'",
		"'constraint'", "'map'", "'''", "'\"'",
	}
	staticData.SymbolicNames = []string{
		"", "DOT", "COLON", "SUB", "SEMI", "COMMA", "QUEST", "AT", "LT", "GT",
		"LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "ASSIGN",
		"BITAND", "BITOR", "BITXOR", "DOUBLE_BITAND", "TILDE", "STAR", "DOUBLE_STAR",
		"NULL", "ARROW", "TOP", "PARALLEL", "IMPLIES", "EQUIVALENT", "EMPTY",
		"AND", "OR", "NOT", "NEQ", "EXTENDS", "OPTS", "CMDS", "IF", "ELSE",
		"FN", "CMD", "CONSTRAINT", "MAP", "SINGLE_QUOTE", "QUOTE", "NumberLiteral",
		"StringLiteral", "BoolLiteral", "ESC", "LineComment", "BlockComment",
		"Identifier", "WS",
	}
	staticData.RuleNames = []string{
		"DOT", "COLON", "SUB", "SEMI", "COMMA", "QUEST", "AT", "LT", "GT", "LPAREN",
		"RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "ASSIGN", "BITAND",
		"BITOR", "BITXOR", "DOUBLE_BITAND", "TILDE", "STAR", "DOUBLE_STAR",
		"NULL", "ARROW", "TOP", "PARALLEL", "IMPLIES", "EQUIVALENT", "EMPTY",
		"AND", "OR", "NOT", "NEQ", "EXTENDS", "OPTS", "CMDS", "IF", "ELSE",
		"FN", "CMD", "CONSTRAINT", "MAP", "SINGLE_QUOTE", "QUOTE", "TRUE", "FALSE",
		"NumberLiteral", "StringLiteral", "BoolLiteral", "ESC", "LineComment",
		"BlockComment", "Identifier", "WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 53, 339, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1,
		2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1,
		8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13,
		1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1,
		19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1,
		26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31,
		1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1,
		39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1,
		43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 3, 47, 250, 8, 47, 1, 47, 4, 47, 253,
		8, 47, 11, 47, 12, 47, 254, 1, 47, 1, 47, 4, 47, 259, 8, 47, 11, 47, 12,
		47, 260, 3, 47, 263, 8, 47, 1, 48, 1, 48, 1, 48, 5, 48, 268, 8, 48, 10,
		48, 12, 48, 271, 9, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 5, 48, 278,
		8, 48, 10, 48, 12, 48, 281, 9, 48, 1, 48, 1, 48, 3, 48, 285, 8, 48, 1,
		49, 1, 49, 3, 49, 289, 8, 49, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51,
		1, 51, 5, 51, 298, 8, 51, 10, 51, 12, 51, 301, 9, 51, 1, 52, 1, 52, 1,
		52, 1, 52, 5, 52, 307, 8, 52, 10, 52, 12, 52, 310, 9, 52, 1, 52, 1, 52,
		1, 52, 1, 53, 1, 53, 5, 53, 317, 8, 53, 10, 53, 12, 53, 320, 9, 53, 1,
		53, 1, 53, 4, 53, 324, 8, 53, 11, 53, 12, 53, 325, 5, 53, 328, 8, 53, 10,
		53, 12, 53, 331, 9, 53, 1, 54, 4, 54, 334, 8, 54, 11, 54, 12, 54, 335,
		1, 54, 1, 54, 1, 308, 0, 55, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7,
		15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33,
		17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51,
		26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69,
		35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87,
		44, 89, 45, 91, 0, 93, 0, 95, 46, 97, 47, 99, 48, 101, 49, 103, 50, 105,
		51, 107, 52, 109, 53, 1, 0, 8, 1, 0, 48, 57, 3, 0, 10, 10, 39, 39, 92,
		92, 3, 0, 10, 10, 34, 34, 92, 92, 8, 0, 34, 34, 39, 39, 92, 92, 98, 98,
		102, 102, 110, 110, 114, 114, 116, 116, 1, 0, 10, 10, 3, 0, 65, 90, 95,
		95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13,
		32, 32, 352, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7,
		1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0,
		15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0,
		0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0,
		0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0,
		0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1,
		0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53,
		1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0,
		61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0,
		0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0,
		0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0,
		0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 95, 1,
		0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103,
		1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0,
		1, 111, 1, 0, 0, 0, 3, 113, 1, 0, 0, 0, 5, 115, 1, 0, 0, 0, 7, 117, 1,
		0, 0, 0, 9, 119, 1, 0, 0, 0, 11, 121, 1, 0, 0, 0, 13, 123, 1, 0, 0, 0,
		15, 125, 1, 0, 0, 0, 17, 127, 1, 0, 0, 0, 19, 129, 1, 0, 0, 0, 21, 131,
		1, 0, 0, 0, 23, 133, 1, 0, 0, 0, 25, 135, 1, 0, 0, 0, 27, 137, 1, 0, 0,
		0, 29, 139, 1, 0, 0, 0, 31, 141, 1, 0, 0, 0, 33, 143, 1, 0, 0, 0, 35, 145,
		1, 0, 0, 0, 37, 147, 1, 0, 0, 0, 39, 149, 1, 0, 0, 0, 41, 152, 1, 0, 0,
		0, 43, 154, 1, 0, 0, 0, 45, 156, 1, 0, 0, 0, 47, 159, 1, 0, 0, 0, 49, 164,
		1, 0, 0, 0, 51, 167, 1, 0, 0, 0, 53, 169, 1, 0, 0, 0, 55, 171, 1, 0, 0,
		0, 57, 173, 1, 0, 0, 0, 59, 175, 1, 0, 0, 0, 61, 177, 1, 0, 0, 0, 63, 179,
		1, 0, 0, 0, 65, 181, 1, 0, 0, 0, 67, 183, 1, 0, 0, 0, 69, 185, 1, 0, 0,
		0, 71, 193, 1, 0, 0, 0, 73, 198, 1, 0, 0, 0, 75, 203, 1, 0, 0, 0, 77, 206,
		1, 0, 0, 0, 79, 211, 1, 0, 0, 0, 81, 214, 1, 0, 0, 0, 83, 218, 1, 0, 0,
		0, 85, 229, 1, 0, 0, 0, 87, 233, 1, 0, 0, 0, 89, 235, 1, 0, 0, 0, 91, 237,
		1, 0, 0, 0, 93, 242, 1, 0, 0, 0, 95, 249, 1, 0, 0, 0, 97, 284, 1, 0, 0,
		0, 99, 288, 1, 0, 0, 0, 101, 290, 1, 0, 0, 0, 103, 293, 1, 0, 0, 0, 105,
		302, 1, 0, 0, 0, 107, 314, 1, 0, 0, 0, 109, 333, 1, 0, 0, 0, 111, 112,
		5, 46, 0, 0, 112, 2, 1, 0, 0, 0, 113, 114, 5, 58, 0, 0, 114, 4, 1, 0, 0,
		0, 115, 116, 5, 45, 0, 0, 116, 6, 1, 0, 0, 0, 117, 118, 5, 59, 0, 0, 118,
		8, 1, 0, 0, 0, 119, 120, 5, 44, 0, 0, 120, 10, 1, 0, 0, 0, 121, 122, 5,
		63, 0, 0, 122, 12, 1, 0, 0, 0, 123, 124, 5, 64, 0, 0, 124, 14, 1, 0, 0,
		0, 125, 126, 5, 60, 0, 0, 126, 16, 1, 0, 0, 0, 127, 128, 5, 62, 0, 0, 128,
		18, 1, 0, 0, 0, 129, 130, 5, 40, 0, 0, 130, 20, 1, 0, 0, 0, 131, 132, 5,
		41, 0, 0, 132, 22, 1, 0, 0, 0, 133, 134, 5, 91, 0, 0, 134, 24, 1, 0, 0,
		0, 135, 136, 5, 93, 0, 0, 136, 26, 1, 0, 0, 0, 137, 138, 5, 123, 0, 0,
		138, 28, 1, 0, 0, 0, 139, 140, 5, 125, 0, 0, 140, 30, 1, 0, 0, 0, 141,
		142, 5, 61, 0, 0, 142, 32, 1, 0, 0, 0, 143, 144, 5, 38, 0, 0, 144, 34,
		1, 0, 0, 0, 145, 146, 5, 124, 0, 0, 146, 36, 1, 0, 0, 0, 147, 148, 5, 94,
		0, 0, 148, 38, 1, 0, 0, 0, 149, 150, 5, 38, 0, 0, 150, 151, 5, 38, 0, 0,
		151, 40, 1, 0, 0, 0, 152, 153, 5, 126, 0, 0, 153, 42, 1, 0, 0, 0, 154,
		155, 5, 42, 0, 0, 155, 44, 1, 0, 0, 0, 156, 157, 5, 42, 0, 0, 157, 158,
		5, 42, 0, 0, 158, 46, 1, 0, 0, 0, 159, 160, 5, 110, 0, 0, 160, 161, 5,
		117, 0, 0, 161, 162, 5, 108, 0, 0, 162, 163, 5, 108, 0, 0, 163, 48, 1,
		0, 0, 0, 164, 165, 5, 45, 0, 0, 165, 166, 5, 62, 0, 0, 166, 50, 1, 0, 0,
		0, 167, 168, 5, 8869, 0, 0, 168, 52, 1, 0, 0, 0, 169, 170, 5, 8741, 0,
		0, 170, 54, 1, 0, 0, 0, 171, 172, 5, 8594, 0, 0, 172, 56, 1, 0, 0, 0, 173,
		174, 5, 8596, 0, 0, 174, 58, 1, 0, 0, 0, 175, 176, 5, 8709, 0, 0, 176,
		60, 1, 0, 0, 0, 177, 178, 5, 8743, 0, 0, 178, 62, 1, 0, 0, 0, 179, 180,
		5, 8744, 0, 0, 180, 64, 1, 0, 0, 0, 181, 182, 5, 172, 0, 0, 182, 66, 1,
		0, 0, 0, 183, 184, 5, 8800, 0, 0, 184, 68, 1, 0, 0, 0, 185, 186, 5, 101,
		0, 0, 186, 187, 5, 120, 0, 0, 187, 188, 5, 116, 0, 0, 188, 189, 5, 101,
		0, 0, 189, 190, 5, 110, 0, 0, 190, 191, 5, 100, 0, 0, 191, 192, 5, 115,
		0, 0, 192, 70, 1, 0, 0, 0, 193, 194, 5, 111, 0, 0, 194, 195, 5, 112, 0,
		0, 195, 196, 5, 116, 0, 0, 196, 197, 5, 115, 0, 0, 197, 72, 1, 0, 0, 0,
		198, 199, 5, 99, 0, 0, 199, 200, 5, 109, 0, 0, 200, 201, 5, 100, 0, 0,
		201, 202, 5, 115, 0, 0, 202, 74, 1, 0, 0, 0, 203, 204, 5, 105, 0, 0, 204,
		205, 5, 102, 0, 0, 205, 76, 1, 0, 0, 0, 206, 207, 5, 101, 0, 0, 207, 208,
		5, 108, 0, 0, 208, 209, 5, 115, 0, 0, 209, 210, 5, 101, 0, 0, 210, 78,
		1, 0, 0, 0, 211, 212, 5, 102, 0, 0, 212, 213, 5, 110, 0, 0, 213, 80, 1,
		0, 0, 0, 214, 215, 5, 99, 0, 0, 215, 216, 5, 109, 0, 0, 216, 217, 5, 100,
		0, 0, 217, 82, 1, 0, 0, 0, 218, 219, 5, 99, 0, 0, 219, 220, 5, 111, 0,
		0, 220, 221, 5, 110, 0, 0, 221, 222, 5, 115, 0, 0, 222, 223, 5, 116, 0,
		0, 223, 224, 5, 114, 0, 0, 224, 225, 5, 97, 0, 0, 225, 226, 5, 105, 0,
		0, 226, 227, 5, 110, 0, 0, 227, 228, 5, 116, 0, 0, 228, 84, 1, 0, 0, 0,
		229, 230, 5, 109, 0, 0, 230, 231, 5, 97, 0, 0, 231, 232, 5, 112, 0, 0,
		232, 86, 1, 0, 0, 0, 233, 234, 5, 39, 0, 0, 234, 88, 1, 0, 0, 0, 235, 236,
		5, 34, 0, 0, 236, 90, 1, 0, 0, 0, 237, 238, 5, 116, 0, 0, 238, 239, 5,
		114, 0, 0, 239, 240, 5, 117, 0, 0, 240, 241, 5, 101, 0, 0, 241, 92, 1,
		0, 0, 0, 242, 243, 5, 102, 0, 0, 243, 244, 5, 97, 0, 0, 244, 245, 5, 108,
		0, 0, 245, 246, 5, 115, 0, 0, 246, 247, 5, 101, 0, 0, 247, 94, 1, 0, 0,
		0, 248, 250, 5, 45, 0, 0, 249, 248, 1, 0, 0, 0, 249, 250, 1, 0, 0, 0, 250,
		252, 1, 0, 0, 0, 251, 253, 7, 0, 0, 0, 252, 251, 1, 0, 0, 0, 253, 254,
		1, 0, 0, 0, 254, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0, 255, 262, 1, 0,
		0, 0, 256, 258, 5, 46, 0, 0, 257, 259, 7, 0, 0, 0, 258, 257, 1, 0, 0, 0,
		259, 260, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261,
		263, 1, 0, 0, 0, 262, 256, 1, 0, 0, 0, 262, 263, 1, 0, 0, 0, 263, 96, 1,
		0, 0, 0, 264, 269, 3, 87, 43, 0, 265, 268, 3, 101, 50, 0, 266, 268, 8,
		1, 0, 0, 267, 265, 1, 0, 0, 0, 267, 266, 1, 0, 0, 0, 268, 271, 1, 0, 0,
		0, 269, 267, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 272, 1, 0, 0, 0, 271,
		269, 1, 0, 0, 0, 272, 273, 3, 87, 43, 0, 273, 285, 1, 0, 0, 0, 274, 279,
		3, 89, 44, 0, 275, 278, 3, 101, 50, 0, 276, 278, 8, 2, 0, 0, 277, 275,
		1, 0, 0, 0, 277, 276, 1, 0, 0, 0, 278, 281, 1, 0, 0, 0, 279, 277, 1, 0,
		0, 0, 279, 280, 1, 0, 0, 0, 280, 282, 1, 0, 0, 0, 281, 279, 1, 0, 0, 0,
		282, 283, 3, 89, 44, 0, 283, 285, 1, 0, 0, 0, 284, 264, 1, 0, 0, 0, 284,
		274, 1, 0, 0, 0, 285, 98, 1, 0, 0, 0, 286, 289, 3, 91, 45, 0, 287, 289,
		3, 93, 46, 0, 288, 286, 1, 0, 0, 0, 288, 287, 1, 0, 0, 0, 289, 100, 1,
		0, 0, 0, 290, 291, 5, 92, 0, 0, 291, 292, 7, 3, 0, 0, 292, 102, 1, 0, 0,
		0, 293, 294, 5, 47, 0, 0, 294, 295, 5, 47, 0, 0, 295, 299, 1, 0, 0, 0,
		296, 298, 8, 4, 0, 0, 297, 296, 1, 0, 0, 0, 298, 301, 1, 0, 0, 0, 299,
		297, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 104, 1, 0, 0, 0, 301, 299,
		1, 0, 0, 0, 302, 303, 5, 47, 0, 0, 303, 304, 5, 42, 0, 0, 304, 308, 1,
		0, 0, 0, 305, 307, 9, 0, 0, 0, 306, 305, 1, 0, 0, 0, 307, 310, 1, 0, 0,
		0, 308, 309, 1, 0, 0, 0, 308, 306, 1, 0, 0, 0, 309, 311, 1, 0, 0, 0, 310,
		308, 1, 0, 0, 0, 311, 312, 5, 42, 0, 0, 312, 313, 5, 47, 0, 0, 313, 106,
		1, 0, 0, 0, 314, 318, 7, 5, 0, 0, 315, 317, 7, 6, 0, 0, 316, 315, 1, 0,
		0, 0, 317, 320, 1, 0, 0, 0, 318, 316, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0,
		319, 329, 1, 0, 0, 0, 320, 318, 1, 0, 0, 0, 321, 323, 5, 45, 0, 0, 322,
		324, 7, 6, 0, 0, 323, 322, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 323,
		1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 328, 1, 0, 0, 0, 327, 321, 1, 0,
		0, 0, 328, 331, 1, 0, 0, 0, 329, 327, 1, 0, 0, 0, 329, 330, 1, 0, 0, 0,
		330, 108, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 332, 334, 7, 7, 0, 0, 333,
		332, 1, 0, 0, 0, 334, 335, 1, 0, 0, 0, 335, 333, 1, 0, 0, 0, 335, 336,
		1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 338, 6, 54, 0, 0, 338, 110, 1, 0,
		0, 0, 17, 0, 249, 254, 260, 262, 267, 269, 277, 279, 284, 288, 299, 308,
		318, 325, 329, 335, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// cmdLexerInit initializes any static state used to implement cmdLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewcmdLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func CmdLexerInit() {
	staticData := &CmdLexerLexerStaticData
	staticData.once.Do(cmdlexerLexerInit)
}

// NewcmdLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewcmdLexer(input antlr.CharStream) *cmdLexer {
	CmdLexerInit()
	l := new(cmdLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &CmdLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "cmdLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// cmdLexer tokens.
const (
	cmdLexerDOT           = 1
	cmdLexerCOLON         = 2
	cmdLexerSUB           = 3
	cmdLexerSEMI          = 4
	cmdLexerCOMMA         = 5
	cmdLexerQUEST         = 6
	cmdLexerAT            = 7
	cmdLexerLT            = 8
	cmdLexerGT            = 9
	cmdLexerLPAREN        = 10
	cmdLexerRPAREN        = 11
	cmdLexerLBRACK        = 12
	cmdLexerRBRACK        = 13
	cmdLexerLBRACE        = 14
	cmdLexerRBRACE        = 15
	cmdLexerASSIGN        = 16
	cmdLexerBITAND        = 17
	cmdLexerBITOR         = 18
	cmdLexerBITXOR        = 19
	cmdLexerDOUBLE_BITAND = 20
	cmdLexerTILDE         = 21
	cmdLexerSTAR          = 22
	cmdLexerDOUBLE_STAR   = 23
	cmdLexerNULL          = 24
	cmdLexerARROW         = 25
	cmdLexerTOP           = 26
	cmdLexerPARALLEL      = 27
	cmdLexerIMPLIES       = 28
	cmdLexerEQUIVALENT    = 29
	cmdLexerEMPTY         = 30
	cmdLexerAND           = 31
	cmdLexerOR            = 32
	cmdLexerNOT           = 33
	cmdLexerNEQ           = 34
	cmdLexerEXTENDS       = 35
	cmdLexerOPTS          = 36
	cmdLexerCMDS          = 37
	cmdLexerIF            = 38
	cmdLexerELSE          = 39
	cmdLexerFN            = 40
	cmdLexerCMD           = 41
	cmdLexerCONSTRAINT    = 42
	cmdLexerMAP           = 43
	cmdLexerSINGLE_QUOTE  = 44
	cmdLexerQUOTE         = 45
	cmdLexerNumberLiteral = 46
	cmdLexerStringLiteral = 47
	cmdLexerBoolLiteral   = 48
	cmdLexerESC           = 49
	cmdLexerLineComment   = 50
	cmdLexerBlockComment  = 51
	cmdLexerIdentifier    = 52
	cmdLexerWS            = 53
)
